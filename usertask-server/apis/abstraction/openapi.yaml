openapi: 3.0.3
info:
  title: Usertask Management API
  version: 1.1.0
servers:
  - url: http://localhost:8080

tags:
  - name: Usertask Management

paths:
  /usertasks/abstraction:
    get:
      operationId: queryUserTasks
      tags:
        - Usertask Management
      summary: Retrieve usertask information
      description: >
        Searches for tasks for a given user. Invoked from the UI.
        Assumption: mTLS for the calling system, userName delegated in parameters. 
        Uses page-based pagination (https://api-patterns.org/patterns/quality/dataTransferParsimony/Pagination)
      parameters:
        - name: type
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/UsertaskType"
        - name: onlyUnclaimed
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/OnlyUnclaimed"
        - name: sortOrder
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/SortOrder"
        - name: pageSize
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/PageSize"
        - name: page
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/PageNumber"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Usertask"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /usertasks/abstraction/{taskId}/completions:
    post:
      operationId: createUsertaskCompletion
      tags:
        - Usertask Completion Management
      summary: Create an usertask completion
      parameters:
        - name: taskId
          description: Usertask ID the completion should be created for
          in: path
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: "#/components/schemas/UsertaskCompletionRequest"
      responses:
        "201":
          description: Created
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

components:
  schemas:
    #---------------------------------------------------------------------------
    # Request params
    #---------------------------------------------------------------------------
    OnlyUnclaimed:
      type: boolean
      example: true
      default: true
    SortOrder:
      type: string
      example: ASCENDING
      default: ASCENDING
      enum:
        - ASCENDING
        - DESCENDING
    PageSize:
      type: integer
      example: 20
      default: 20
      minimum: 1
      maximum: 20
    PageNumber:
      type: integer
      default: 1
      example: 1
      minimum: 1
    #---------------------------------------------------------------------------
    # Common classes
    #---------------------------------------------------------------------------
    AuditMetaData:
      type: object
      required:
        - createdBy
        - createdOn
      properties:
        createdBy:
          type: string
          example: "SCXXXXXX"
          readOnly: true
        createdOn:
          type: string
          format: date-time
          example: "2023-07-31T08:12:34Z"
          readOnly: true
    #---------------------------------------------------------------------------
    # Model objects
    #---------------------------------------------------------------------------
    UsertaskBase:
      allOf:
        - $ref: "#/components/schemas/AuditMetaData"
        - type: object
          required:
            - id
            - status
            - usertaskType
          properties:
            id:
              type: string
            claim:
              $ref: "#/components/schemas/Claim"
            status:
              type: string
              description: "possible values are described in enum UsertaskStatusType"
            usertaskType:
              type: string
              description: "possible values are described in enum UsertaskType"
    Claim:
      type: object
      required:
        - id
        - ownerId
        - ownerFirstname
        - ownerLastname
      properties:
        id:
          type: string
          readOnly: true
        ownerId:
          type: string
          example: "SCXXXXXX"
        ownerFirstname:
          type: string
          example: "Peter"
        ownerLastname:
          type: string
          example: "Muster"
        createdOn:
          type: string
          format: date-time
          example: "2023-07-31T08:12:34Z"
          readOnly: true
    Usertask:
      allOf:
        - $ref: "#/components/schemas/UsertaskBase"
        - type: object
          required:
            - inputData
          properties:
            inputData:
              description: See NameChangeInputData, AddressChangeInputData, NewTaskInputData for possible key-pairs.
              $ref: "#/components/schemas/UsertaskInputData"
            outputData:
              description: See NameChangeOutputData, AddressChangeOutputData, NewTaskOutputData for possible key-pairs.
              $ref: "#/components/schemas/UsertaskOutputData"
    #---------------------------------------------------------------------------
    # Abstract classes with discriminator 'usertaskType'
    #---------------------------------------------------------------------------
    UsertaskInputData:
      type: object
      description: "possible objects are NameChangeInputData, AddressChangeInputData, NewTaskInputData"
      properties:
        usertaskType:
          type: string
          description: "possible values are described in enum UsertaskType"
      discriminator:
        propertyName: usertaskType
        mapping:
          "NAME_CHANGE_TASK": "#/components/schemas/NameChangeInputData"
          "ADDRESS_CHANGE_TASK": "#/components/schemas/AddressChangeInputData"
          "NEW_TASK": "#/components/schemas/NewTaskInputData"
    UsertaskOutputData:
      type: object
      description: "possible objects are NameChangeOutputData, AddressChangeOutputData, NewTaskOutputData"
      properties:
        usertaskType:
          type: string
          description: "possible values are described in enum UsertaskType"
      discriminator:
        propertyName: usertaskType
        mapping:
          "NAME_CHANGE_TASK": "#/components/schemas/NameChangeOutputData"
          "ADDRESS_CHANGE_TASK": "#/components/schemas/AddressChangeOutputData"
          "NEW_TASK": "#/components/schemas/NewTaskOutputData"
    UsertaskCompletionRequest:
      type: object
      description: "possible objects are NameChangeCompletionData, AddressChangeCompletionData, NewTaskCompletionData"
      properties:
        usertaskType:
          type: string
          description: "possible values are described in enum UsertaskType"
      discriminator:
        propertyName: usertaskType
        mapping:
          "NAME_CHANGE_TASK": "#/components/schemas/NameChangeCompletionData"
          "ADDRESS_CHANGE_TASK": "#/components/schemas/AddressChangeCompletionData"
          "NEW_TASK": "#/components/schemas/NewTaskCompletionData"
    #---------------------------------------------------------------------------
    # Concrete classes
    #---------------------------------------------------------------------------
    NameChangeInputData:
      allOf:
        - $ref: "#/components/schemas/UsertaskInputData"
        - type: object
          required:
            - usertaskType
            - oldName
            - newName
            - evidenceDocumentId
          properties:
            usertaskType:
              type: string
              description: "possible values are described in enum UsertaskType"
            oldName:
              type: string
            newName:
              type: string
            evidenceDocumentId:
              type: string
            something:
              type: string
    NameChangeOutputData:
      allOf:
        - $ref: "#/components/schemas/UsertaskOutputData"
        - type: object
          properties:
            evidenceAccepted:
              type: object
              properties:
                name:
                  type: string
                  default: "evidenceAccepted"
                type:
                  type: string
                  default: "boolean"
                required:
                  type: boolean
                  default: true
            acceptedNewName:
              type: object
              properties:
                name:
                  type: string
                  default: "acceptedNewName"
                type:
                  type: string
                  default: "string"
                required:
                  type: boolean
                  default: true
            comment:
              type: object
              properties:
                name:
                  type: string
                  default: "comment"
                type:
                  type: string
                  default: "string"
                required:
                  type: boolean
                  default: false
    AddressChangeInputData:
      allOf:
        - $ref: "#/components/schemas/UsertaskInputData"
        - type: object
          required:
            - usertaskType
            - oldAddressLine1
            - newAddressLine1
            - evidenceDocumentId
          properties:
            usertaskType:
              type: string
              description: "possible values are described in enum UsertaskType"
            oldAddressLine1:
              type: string
              example: "addressLine1"
            oldZipCode:
              type: string
              example: "6534"
            oldCity:
              type: string
              example: "some city"
            newAddressLine1:
              type: string
              example: "addressLine1"
            newZipCode:
              type: string
              example: "6534"
            newCity:
              type: string
              example: "some city"
            evidenceDocumentId:
              type: string
    AddressChangeOutputData:
      allOf:
        - $ref: "#/components/schemas/UsertaskOutputData"
        - type: object
          properties:
            acceptedAddress:
              type: object
              properties:
                name:
                  type: string
                  default: "acceptedAddress"
                type:
                  type: string
                  default: "boolean"
                required:
                  type: boolean
                  default: true
            acceptedAddressLine:
              type: object
              properties:
                name:
                  type: string
                  default: "acceptedAddressLine"
                type:
                  type: string
                  default: "string"
                required:
                  type: boolean
                  default: true
    NewTaskInputData:
      allOf:
        - $ref: "#/components/schemas/UsertaskInputData"
        - type: object
          required:
            - usertaskType
            - newAttribute
          properties:
            usertaskType:
              type: string
              description: "possible values are described in enum UsertaskType"
            newAttribute:
              type: string
    NewTaskOutputData:
      allOf:
        - $ref: "#/components/schemas/UsertaskOutputData"
        - type: object
          properties:
            anyVariable:
              type: object
              properties:
                name:
                  type: string
                  default: "anyVariable"
                type:
                  type: string
                  default: "string"
                required:
                  type: boolean
                  default: false
    NameChangeCompletionData:
      allOf:
        - $ref: "#/components/schemas/UsertaskCompletionRequest"
        - type: object
          required:
            - evidenceAccepted
            - acceptedNewName
          properties:
            evidenceAccepted:
              type: boolean
            acceptedNewName:
              type: string
            comment:
              type: string
    AddressChangeCompletionData:
      allOf:
        - $ref: "#/components/schemas/UsertaskCompletionRequest"
        - type: object
          required:
            - acceptedAddress
            - acceptedAddressLine
          properties:
            acceptedAddress:
              type: boolean
            acceptedAddressLine:
              type: string
    NewTaskCompletionData:
      allOf:
        - $ref: "#/components/schemas/UsertaskCompletionRequest"
        - type: object
          properties:
            anyVariable:
              type: string
    #---------------------------------------------------------------------------
    # Enum utilities
    #---------------------------------------------------------------------------
    UsertaskStatusType:
      type: string
      example: OPEN
      enum:
        - OPEN
        - COMPLETED
    UsertaskType:
      type: string
      example: NAME_CHANGE_TASK
      enum:
        - NAME_CHANGE_TASK
        - ADDRESS_CHANGE_TASK
        - NEW_TASK
    #---------------------------------------------------------------------------
    # Exception handling
    #---------------------------------------------------------------------------
    UsertaskException:
      type: object
      required:
        - status
        - message
      properties:
        status:
          type: string
          nullable: false
          example: <http error code>
        message:
          type: string
          example: "Invalid request parameter"
        details:
          type: array
          items:
            $ref: "#/components/schemas/UsertaskDetailException"
    UsertaskDetailException:
      type: object
      properties:
        field:
          type: string
          example: firstName
        reason:
          type: string
          example: "cannot be blank"
  #---------------------------------------------------------------------------
  # Responses
  #---------------------------------------------------------------------------
  responses:
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UsertaskException"
    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UsertaskException"
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UsertaskException"
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UsertaskException"
