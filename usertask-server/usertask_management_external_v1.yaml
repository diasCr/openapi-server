openapi: 3.0.3
info:
  title: Usertask Management API
  version: 1.0.0
servers:
  - url: http://localhost:8080

tags:
  - name: Usertask Management
  - name: Usertask Completion Management
  - name: Usertask Claim Management

paths:
  /usertasks:
    get:
      operationId: queryUserTasks
      tags:
        - Usertask Management
      summary: Retrieve usertask information
      description: >
        Searches for tasks for a given user. Invoked from the UI.
        Assumption: mTLS for the calling system, userName delegated in parameters. 
        Uses page-based pagination (https://api-patterns.org/patterns/quality/dataTransferParsimony/Pagination)
      parameters:
        - name: type
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/UsertaskType"
        - name: onlyUnclaimed
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/OnlyUnclaimed"
        - name: sortOrder
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/SortOrder"
        - name: pageSize
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/PageSize"
        - name: page
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/PageNumber"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Usertask"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /usertasks/{taskId}:
    get:
      operationId: getUsertaskById
      tags:
        - Usertask Management
      summary: Retrieve usertask by ID
      parameters:
        - name: taskId
          description: Usertask ID to be retrieved
          in: path
          schema:
            type: string
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Usertask"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /usertasks/{taskId}/completions:
    post:
      operationId: createUsertaskCompletion
      tags:
        - Usertask Completion Management
      summary: Create an usertask completion
      parameters:
        - name: taskId
          description: Usertask ID the completion should be created for
          in: path
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: "#/components/schemas/UsertaskCompletionRequest"
      responses:
        "201":
          description: Created
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /usertasks/{taskId}/claims:
    post:
      operationId: createUsertaskClaim
      tags:
        - Usertask Claim Management
      summary: Create an usertask claim
      parameters:
        - name: taskId
          description: Usertask ID the claim should be created for
          in: path
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: "#/components/schemas/Claim"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Claim"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /usertasks/{taskId}/claims/{claimId}:
    delete:
      operationId: deleteUsertaskClaim
      tags:
        - Usertask Claim Management
      summary: Delete an usertask claim
      parameters:
        - name: taskId
          description: Usertask ID the claim should be deleted for
          in: path
          schema:
            type: string
          required: true
        - name: claimId
          description: Claim that should be deleted
          in: path
          schema:
            type: string
          required: true
      responses:
        "204":
          description: No Content
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

components:
  schemas:
    OnlyUnclaimed:
      type: boolean
      example: true
      default: true

    SortOrder:
      type: string
      example: ASCENDING
      default: ASCENDING
      enum:
        - ASCENDING
        - DESCENDING

    PageSize:
      type: integer
      example: 20
      default: 20
      minimum: 1
      maximum: 20

    PageNumber:
      type: integer
      default: 1
      example: 1
      minimum: 1

    AuditMetaData:
      type: object
      required:
        - createdBy
        - createdOn
      properties:
        createdBy:
          type: string
          example: "SCXXXXXX"
          readOnly: true
        createdOn:
          type: string
          format: date-time
          example: "2023-07-31T08:12:34Z"
          readOnly: true

    UserTaskBase:
      allOf:
        - $ref: "#/components/schemas/AuditMetaData"
        - type: object
          required:
            - id
            - status
            - usertaskType
          properties:
            id:
              type: string
            claim:
              $ref: "#/components/schemas/Claim"
            status:
              type: string
              description: "possible values: OPEN, COMPLETED - use utility enum UsertaskStatusType"
            usertaskType:
              type: string
              description: "possible values: NAME_CHANGE_TASK, ADDRESS_CHANGE_TASK - use utility enum UsertaskType"

    Usertask:
      allOf:
        - $ref: "#/components/schemas/UserTaskBase"
        - type: object
          required:
            - data
          properties:
            data:
              $ref: "#/components/schemas/UserTaskData"

    UserTaskData:
      type: object
      properties:
        input:
          description: The returned object depends on the usertask type
          $ref: "#/components/schemas/StringToObjectMap"
        output:
          description: The returned object depends on the usertask type
          $ref: "#/components/schemas/StringToObjectMap"

    StringToObjectMap:
      type: object
      additionalProperties: true
      description: "This object should not be used directrly. Use the concrete maps for the desired usertask type instead."
    
    NameChangeInputData:
      type: object
      description: Object returned if task type equal NAME_CHANGE_TASK
      required:
        - oldName
        - newName
        - evidenceDocumentId
      properties:
        oldName:
          type: string
        newName:
          type: string
        evidenceDocumentId:
          type: string
      additionalProperties: true

    NameChangeOutputData:
      type: object
      required:
        - evidenceAccepted
      properties:
        evidenceAccepted:
          type: boolean
        comment:
          type: string
      additionalProperties: true

    AddressChangeInputData:
      type: object
      description: Object returned if task type equal ADDRESS_CHANGE_TASK
      required:
        - oldAddressLine1
        - newAddressLine1
        - evidenceDocumentId
      properties:
        oldAddressLine1:
          type: string
          example: "addressLine1"
        oldZipCode:
          type: string
          example: "6534"
        oldCity:
          type: string
          example: "some city"
        newAddressLine1:
          type: string
          example: "addressLine1"
        newZipCode:
          type: string
          example: "6534"
        newCity:
          type: string
          example: "some city"
        evidenceDocumentId:
          type: string
      additionalProperties: true

    AddressChangeOutputData:
      type: object
      required:
        - addressIsValid
      properties:
        addressIsValid:
          type: boolean
        hasHouseNumber:
          type: boolean
        comment:
          type: string
      additionalProperties: true

    NewTaskInputData:
      type: object
      description: Object returned if task type equal NAME_CHANGE_TASK
      required:
        - valueOne
        - valueTwo
      properties:
        valueOne:
          type: string
        valueTwo:
          type: string
      additionalProperties: true

    Claim:
      type: object
      required:
        - id
        - ownerId
        - ownerFirstname
        - ownerLastname
      properties:
        id:
          type: string
          readOnly: true
        ownerId:
          type: string
          example: "SCXXXXXX"
        ownerFirstname:
          type: string
          example: "Peter"
        ownerLastname:
          type: string
          example: "Muster"
        createdOn:
          type: string
          format: date-time
          example: "2023-07-31T08:12:34Z"
          readOnly: true

    UsertaskCompletionRequest:
      type: object
      additionalProperties:
        type: string
      example:
        evidenceAccepted: false
        comment: "Wrong evidence. Could not validate."

    UsertaskStatusType:
      type: string
      example: OPEN
      enum:
        - OPEN
        - COMPLETED

    UsertaskType:
      type: string
      example: NAME_CHANGE_TASK
      enum:
        - NAME_CHANGE_TASK
        - ADDRESS_CHANGE_TASK
        - NEW_TASK

    UsertaskException:
      type: object
      required:
        - status
        - message
      properties:
        status:
          type: string
          nullable: false
          example: <http error code>
        message:
          type: string
          example: "Invalid request parameter"
        details:
          type: array
          items:
            $ref: "#/components/schemas/UsertaskDetailException"

    UsertaskDetailException:
      type: object
      properties:
        field:
          type: string
          example: firstName
        reason:
          type: string
          example: "cannot be blank"

  responses:
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UsertaskException"
    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UsertaskException"
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UsertaskException"
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UsertaskException"
